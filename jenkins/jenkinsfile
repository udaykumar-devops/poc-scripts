pipeline {
  agent any
  stages{
      stage('Clone Repository'){
          steps{
              script{
                  deleteDir()
                  checkout scm
                }
          }
      }
        stage('Download Artifacts') {  
                steps {
                   script {
                       def server = Artifactory.server 'Art1'
                       def buildInfo = Artifactory.newBuildInfo()
                       buildInfo.env.capture = true
                       def downloadSpec = """{
                         "files": [{
                             "pattern": "demo-releases/${VERSION}/node_app.zip"
                         }
                       }"""
                       // Download files from jfrog artifactory
                      server.download(downloadSpec)
                       rtBuildInfo (maxBuilds: 1, maxDays: 2, doNotDiscardBuilds: ["3"], deleteBuildArtifacts: true)
                      server.publishBuildInfo buildInfo
                      }
            }
        }
        stage('Building image') {
           steps{
              script {
                 sh 'mv ${VERSION}/node_app.zip  ${WORKSPACE}/dockerfiles/demo'
                 sh 'unzip -q  ${WORKSPACE}/dockerfiles/demo/node_app.zip -d ${WORKSPACE}/dockerfiles/demo'
                 sh 'docker build -t demo_publisher:${VERSION} ${WORKSPACE}/dockerfiles/demo'
        }
      }
    }
      stage('Push Image to OCR') {
        steps{
           script{
               docker.withRegistry('https://hyd.ocir.io','OCRlogin') {
               sh 'docker tag demo_publisher:${VERSION} hyd.ocir.io/idgrosnf0lwv/demo-repo/demo_publisher:${VERSION}'
               sh 'docker push hyd.ocir.io/idgrosnf0lwv/demo-repo/publisher:${VERSION}'
               }
           }
        } 
     }
  }
}